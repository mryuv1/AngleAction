
clc;
clear;
close all;

%% variables

parameters = params();
w1 = parameters.w1;
w2 = parameters.w2;
Et = parameters.Et;
Ex = parameters.Ex;
Ey = Et - Ex;
circle_center = parameters.circle_center;
radius = parameters.radius;
%% check for one point

r = 0.2;
x_w = -0.4;
y_w = -0.6;

% make line

% ys = linspace(-1,y_w, 1000);
% x = ones(1,1000)*(-0.4);
% slope = ones(1,1000)*(inf);
% w = [x.' ys.' slope.'];

Ex_min = 0.5*(w1^2)*(x_w^2);
EY_min = 0.5*(w2^2)*(y_w^2);
numberOfenergies = 1e2;
% E_x = Ex_min:0.05:Et;


vertical_step = create_vertical_line(circle_center(2) + radius, [-1 circle_center(1)]);
horizontal_step = create_horizontal_line(circle_center(1) + radius, [-1 circle_center(2)]);
coords_circ = create_cuarter_circle(circle_center, radius, 5e2);

united_coords = [horizontal_step; coords_circ; vertical_step];

w0 = [w1, w2];
results_preHit = zeros(length(coords_circ)*4, 4);
results_postHit = zeros(length(coords_circ)*4, 4);
final_E_preHit = zeros(length(coords_circ)*4, 1);
final_E_postHit = zeros(length(coords_circ)*4, 1);
idx = 1;

coords_to_use = coords_circ;

for w_idc = 1:length(coords_to_use)
    x_w = coords_to_use(w_idc, 1);
    y_w = coords_to_use(w_idc, 2);
    Ex_min = 0.5*(w1^2)*(x_w^2);
    EY_min = 0.5*(w2^2)*(y_w^2);

    if Et-EY_min<Ex_min
        continue
    end
%     energies = linspace(Ex_min, Et-EY_min, numberOfenergies);
    
    % the moments:
    pxw_abs = sqrt(2*Ex - (w1*x_w)^2);
    pyw_abs = sqrt(2*Ey - (w2*y_w)^2);
    
    % 4 possible directions:
    q0_right_up = [x_w; y_w; pxw_abs; pyw_abs];
    q0_right_down = [x_w; y_w; pxw_abs; -pyw_abs];
    q0_left_up = [x_w; y_w; -pxw_abs; pyw_abs];
    q0_left_down = [x_w; y_w; -pxw_abs; -pyw_abs];

    tsapn = [0 50];
    opt = odeset('RelTol',1e-9, 'Events',@EventsFunction);

    % 4 solvers, some of them will stop fast
    [t,q0_track_right_up] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q0_right_up, opt);
    [t,q0_track_right_down] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q0_right_down, opt);
    [t,q0_track_left_up] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q0_left_up, opt);
    [t,q0_track_left_down] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q0_left_down, opt);

%     figure;
%     hold on
%     plot(coords_to_use(:,1),coords_to_use(:,2),'ro')
%     plot(q0_track_right_up(:,1),q0_track_right_up(:,2),'bo')
%     plot(q0_track_right_down(:,1),q0_track_right_down(:,2),'go')
%     plot(q0_track_left_up(:,1),q0_track_left_up(:,2),'ko')
%     plot(q0_track_left_down(:,1),q0_track_left_down(:,2),'mo')
%     hold off

    % check if its a valid track for each of them, and add to final vector
    
    final_PreHit_right_up = q0_track_right_up(end, :);
    if (length(q0_track_right_up) > 10) && (abs(final_PreHit_right_up(3)) < 1e-9)
        p_postHit_right_up = return_momentum(-[q0_right_up(3) q0_right_up(4)], coords_to_use(w_idc, 3));
        q1_right_up = [x_w; y_w; p_postHit_right_up(1); p_postHit_right_up(2)];
        [t,q1_track_right_up] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q1_right_up, opt);
        final_PostHit_right_up = q1_track_right_up(end, :);
        
%         figure;
%         hold on
%         plot(coords_to_use(:,1),coords_to_use(:,2),'ro')
%         plot(q0_track_right_up(:,1),q0_track_right_up(:,2),'bo')
%         plot(q1_track_right_up(:,1),q1_track_right_up(:,2),'go')
%         hold off

        % locate results
        final_E_preHit(idx) = calcTotalEnergy(final_PreHit_right_up);
        final_E_postHit(idx) = calcTotalEnergy(final_PostHit_right_up);
        results_preHit(idx, :) = final_PreHit_right_up;
        results_postHit(idx, :) = final_PostHit_right_up;
        idx = idx + 1;
    end
    
    final_PreHit_right_down = q0_track_right_down(end, :);
    if (length(q0_track_right_down) > 10) && (abs(final_PreHit_right_down(3)) < 1e-9)
        p_postHit_right_down = return_momentum(-[q0_right_down(3) q0_right_down(4)], coords_to_use(w_idc, 3));
        q1_right_down = [x_w; y_w; p_postHit_right_down(1); p_postHit_right_down(2)];
        [t,q1_track_right_down] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q1_right_down, opt);

        final_PostHit_right_down = q1_track_right_down(end, :);
        
        % locate results
        final_E_preHit(idx) = calcTotalEnergy(final_PreHit_right_down);
        final_E_postHit(idx) = calcTotalEnergy(final_PostHit_right_down);
        results_preHit(idx, :) = final_PreHit_right_down;
        results_postHit(idx, :) = final_PostHit_right_down;
        idx = idx + 1;
    end

    
    final_PreHit_left_up = q0_track_left_up(end, :);
    if (length(q0_track_left_up) > 10) && (abs(final_PreHit_left_up(3)) < 1e-9)
        p_postHit_left_up = return_momentum(-[q0_left_up(3) q0_left_up(4)], coords_to_use(w_idc, 3));
        q1_left_up = [x_w; y_w; p_postHit_left_up(1); p_postHit_left_up(2)];
        [t,q1_track_left_up] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q1_left_up, opt);

        
        final_PostHit_left_up = q1_track_left_up(end, :);
        % locate results
        final_E_preHit(idx) = calcTotalEnergy(final_PreHit_left_up);
        final_E_postHit(idx) = calcTotalEnergy(final_PostHit_left_up);
        results_preHit(idx, :) = final_PreHit_left_up;
        results_postHit(idx, :) = final_PostHit_left_up;
        idx = idx + 1;
    end
    
    final_PreHit_left_down = q0_track_left_down(end, :);
    if (length(q0_track_left_down) > 10) && (abs(final_PreHit_left_down(3)) < 1e-9)
        p_postHit_left_down = return_momentum(-[q0_left_down(3) q0_left_down(4)], coords_to_use(w_idc, 3));
        q1_left_down = [x_w; y_w; p_postHit_left_down(1); p_postHit_left_down(2)];
        [t,q1_track_left_down] = ode45(@(t,q)moveMentEq_PreHit(t, q, w0),tsapn, q1_left_down, opt);

        
        final_PostHit_left_down = q1_track_left_down(end, :);

        % locate results
        final_E_preHit(idx) = calcTotalEnergy(final_PreHit_left_down);
        final_E_postHit(idx) = calcTotalEnergy(final_PostHit_left_down);
        results_preHit(idx, :) = final_PreHit_left_down;
        results_postHit(idx, :) = final_PostHit_left_down;
        idx = idx + 1;
    end

end

results_preHit = results_preHit(1:idx-1, :);
results_postHit = results_postHit(1:idx-1, :);
final_E_preHit = final_E_preHit(1:idx-1);
final_E_postHit = final_E_postHit(1:idx-1);

% if energy isn't conserved
assert(max(abs(final_E_preHit - final_E_postHit)./Et)<1e-5, "The Energy is NOT conserved");

Energy_Y_line_coords = calcY_Energy_level();
figure;
hold on
plot(Energy_Y_line_coords(:,1),Energy_Y_line_coords(:,2), 'k')
plot(results_preHit(:,2),results_preHit(:,4), 'ro')
plot(results_postHit(:,2),results_postHit(:,4), 'bo')
grid on
legend('Y preHit energy levels','preHit', 'PostHit')
xlabel("y")
ylabel('P_y')
hold off
xlim([-3.5, 3.5]);
ylim([-3.5, 3.5]);

% figure;
% sanity_check = results_preHit(:,2).^2 + results_preHit(:,4).^2;
% plot(1:length(sanity_check),sanity_check, '+');
%% functions:


function dqdt = moveMentEq_PreHit(t, q, w) % q = [x, y, px, py]; w = [w1, w2]

    dqdt = zeros(4,1);
    
    dqdt(1) = q(3); % dx/dt
    dqdt(2) = q(4); % dy/dt
    dqdt (3) = -(w(1)^2)*q(1); % dPx/dt
    dqdt (4) = -(w(2)^2)*q(2); % dPy/dt
end

% function dqdt = moveMentEq_PostHit(t, q, w) % q = [x, y, px, py]; w = [w1, w2]
%     
%     %create retur rulls
%     inside_circ = ((q(1) + q(3)*epsilon) - circle_center(1))^2 + ((q(2) + q(4)*epsilon) - circle_center(2))^2 < radius^2;
%     inside_vertial_wall = ((q(1) + q(3)*epsilon) < (circle_center(1) + radius)) && ((q(2) + q(4)*epsilon) < (circle_center(2)));
%     inside_horizontal_wall = ((q(2) + q(4)*epsilon) < (circle_center(2) + radius - epsilon)) && ((q(1) + q(3)*epsilon) < (circle_center(1)-epsilon));
% 
%     dqdt = zeros(4,1);
%     dqdt(1) = q(3); % dx/dt
%     dqdt(2) = q(4); % dy/dt
%     dqdt (3) = -(w(1)^2)*q(1); % dPx/dt
%     dqdt (4) = -(w(2)^2)*q(2); % dPy/dt
% end


function [position,isterminal,direction] = EventsFunction(t,q) % q = [x, y, px, py];
    
    epsilon = 1e-4;
    myParams = params();
    circle_center = myParams.circle_center;
    radius = myParams.radius;
    % check that the track isn't inside the step, with euiler aproximation
    inside_circ = ((q(1) + q(3)*epsilon) - circle_center(1))^2 + ((q(2) + q(4)*epsilon) - circle_center(2))^2 < radius^2;
    inside_vertial_wall = ((q(1) + q(3)*epsilon) < (circle_center(1) + radius)) && ((q(2) + q(4)*epsilon) < (circle_center(2)));
    inside_horizontal_wall = ((q(2) + q(4)*epsilon) < (circle_center(2) + radius - epsilon)) && ((q(1) + q(3)*epsilon) < (circle_center(1)-epsilon));
    position = [q(3), ~inside_circ, ~inside_vertial_wall, ~inside_horizontal_wall];             % The value that we want to be zero
    isterminal = [1, 1, 1, 1];   % Stop the integration
    direction = [-1, 0, 0, 0];   % Negative direction only
end

function p_new = return_momentum(p, slope) % q = [px, py];

    theta = atan(slope);
    p_new = zeros(2,1);           
    p_new(1) = p(1)*cos(2*theta) + p(2)* sin(2*theta);
    p_new(2) = p(1)*sin(2*theta) - p(2)* cos(2*theta);
end

function coords = create_cuarter_circle(center, radius, numberOfPoints) % center = [x, y]; coords = [x, y, slope]  
    if nargin<3
        numberOfPoints = 1e2;
    end

    xs = linspace(center(1), center(1) + radius, numberOfPoints);
    ys = center(2) + sqrt(radius^2 - (xs - center(1)).^2);
    m = (center(1) - xs)./(ys - center(2));

    coords = [xs.' ys.' m.'];
    
end

function coords = create_vertical_line(x_cord, ylims, numberOfPoints) % ylims = [y_min, y_max];  
    if nargin<3
        numberOfPoints = 1e2;
    end

    xs = x_cord.*ones(numberOfPoints, 1);
    ys = linspace(ylims(1), ylims(2), numberOfPoints);
    m = -inf.*ones(numberOfPoints, 1);

    coords = [xs ys.' m];
    
end

function coords = create_horizontal_line(y_cord, xlims, numberOfPoints) % ylims = [y_min, y_max];  
    if nargin<3
        numberOfPoints = 1e2;
    end

    ys = y_cord.*ones(numberOfPoints, 1);
    xs = linspace(xlims(1), xlims(2), numberOfPoints);
    m = zeros(numberOfPoints, 1);

    coords = [xs.' ys m];
    
end

function totalE = calcTotalEnergy(q) % q = [x, y, px, py];
    myParams = params();
    totalE = 0.5*(q(3)^2 + q(4)^2) + 0.5*((myParams.w1*q(1))^2 + (myParams.w2*q(2))^2);
end

function Energy_line_coords = calcY_Energy_level() 
    % calc the y, py coords
    myParams = params();
    y_max = sqrt(2*myParams.Ey/(myParams.w2^2));
    py_max = sqrt(2*myParams.Ey);
    thetas = linspace(0, 2*pi, 1e2);

    xs = y_max*cos(thetas);
    ys = py_max*sin(thetas);

    Energy_line_coords = [xs.' ys.'];
end

function inside = checkIfInside(q) % q = [x, y, px, py];
    epsilon = 1e-4;
    myParams = params();
    circle_center = myParams.circle_center;
    radius = myParams.radius;
    % check that the track isn't inside the step, with euiler aproximation
    inside_circ = ((q(1) + q(3)*epsilon) - circle_center(1))^2 + ((q(2) + q(4)*epsilon) - circle_center(2))^2 < radius^2;
    inside_vertial_wall = ((q(1) + q(3)*epsilon) < (circle_center(1) + radius)) && ((q(2) + q(4)*epsilon) < (circle_center(2)));
    inside_horizontal_wall = ((q(2) + q(4)*epsilon) < (circle_center(2) + radius - epsilon)) && ((q(1) + q(3)*epsilon) < (circle_center(1)-epsilon));

    inside = inside_circ | inside_vertial_wall | inside_horizontal_wall;
end
function myParams = params()
    myParams = struct;
    myParams.w1 = 1;
    myParams.w2 = 2;
    myParams.Et = 0.5*(myParams.w1^2 + myParams.w2^2)*2;
    myParams.Ex = 1.5;
    myParams.Ey = myParams.Et - myParams.Ex;
    myParams.circle_center = [-0.4 -0.4];
    myParams.radius = 0.1;
end